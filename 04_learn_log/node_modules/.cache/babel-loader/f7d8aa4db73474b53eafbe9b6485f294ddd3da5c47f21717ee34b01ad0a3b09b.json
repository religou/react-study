{"ast":null,"code":"var _jsxFileName = \"F:\\\\Code\\\\react\\\\react-study\\\\04_learn_log\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from 'react';\n\n// 定义 App 组件\n// 组件名称应该使用大写，并和文件名称相同\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  console.log(\"App 组件渲染了。。。\");\n\n  // 1.setState 只有在数据发生变化的时候，才会被调用\n  // 2.使用setState 修改对象时，是使用新的对象来代替老的对象，如果直接更新原有\n  //   对象的值，并不会重新渲染组件，因为对象的内存地址并没有发生变化\n  const [counter, setCounter] = useState(1);\n  const [user, setUser] = useState({\n    name: 'Martin',\n    sex: 'Male'\n  });\n  const add = () => {\n    setCounter(2);\n  };\n  const updateHandler = () => {\n    // 第一种方法：使用原生js中Object.Assign来对之前的对象进行浅复制\n    const newUser = Object.assign({}, user);\n    newUser.name = 'Martin-New';\n    setUser(newUser);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateHandlerr,\n      children: \"update user\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 11\n  }, this);\n};\n_s(App, \"ShLWeEX3S8VAxck2Y0WLtyg08rk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","console","log","counter","setCounter","user","setUser","name","sex","add","updateHandler","newUser","Object","assign","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","updateHandlerr","_c","$RefreshReg$"],"sources":["F:/Code/react/react-study/04_learn_log/src/App.js"],"sourcesContent":["import \"./App.css\"\r\nimport { useState } from 'react'\r\n\r\n// 定义 App 组件\r\n// 组件名称应该使用大写，并和文件名称相同\r\nconst App = () => {\r\n\r\n  console.log(\"App 组件渲染了。。。\")\r\n\r\n  // 1.setState 只有在数据发生变化的时候，才会被调用\r\n  // 2.使用setState 修改对象时，是使用新的对象来代替老的对象，如果直接更新原有\r\n  //   对象的值，并不会重新渲染组件，因为对象的内存地址并没有发生变化\r\n  const [counter, setCounter] = useState(1)\r\n\r\n  const [user, setUser] = useState({ name: 'Martin', sex: 'Male' })\r\n\r\n  const add = () => {\r\n    setCounter(2)\r\n  }\r\n\r\n  const updateHandler = () => {\r\n    // 第一种方法：使用原生js中Object.Assign来对之前的对象进行浅复制\r\n    const newUser = Object.assign({}, user)\r\n    newUser.name = 'Martin-New'\r\n    setUser(newUser)\r\n  }\r\n\r\n  return (<div className=\"app\">\r\n    <h1>{counter}</h1>\r\n    <button onClick={add}>+1</button>\r\n    <button onClick={updateHandlerr}>update user</button>\r\n  </div>)\r\n}\r\n\r\nexport default App"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;EAE3B;EACA;EACA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEzC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAAEW,IAAI,EAAE,QAAQ;IAAEC,GAAG,EAAE;EAAO,CAAC,CAAC;EAEjE,MAAMC,GAAG,GAAGA,CAAA,KAAM;IAChBL,UAAU,CAAC,CAAC,CAAC;EACf,CAAC;EAED,MAAMM,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,IAAI,CAAC;IACvCM,OAAO,CAACJ,IAAI,GAAG,YAAY;IAC3BD,OAAO,CAACK,OAAO,CAAC;EAClB,CAAC;EAED,oBAAQb,OAAA;IAAKgB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAC1BjB,OAAA;MAAAiB,QAAA,EAAKZ;IAAO;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAClBrB,OAAA;MAAQsB,OAAO,EAAEX,GAAI;MAAAM,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACjCrB,OAAA;MAAQsB,OAAO,EAAEC,cAAe;MAAAN,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACjD;AACR,CAAC;AAAAnB,EAAA,CA3BKD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA6BT,eAAeA,GAAG;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}